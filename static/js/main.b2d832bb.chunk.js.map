{"version":3,"sources":["logo.svg","store/TodoModel.js","store/TodoStore.js","components/TodoEntry.js","components/TodoItem.js","components/TodoItems.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TodoModel","store","title","completed","id","Object","classCallCheck","this","initializerDefineProperty","_descriptor","_descriptor2","observable","action","todosFull","push","lastID","filter","x","_this","todos","forEach","todo","indexOf","remove","_this2","all","act","com","_this3","_this4","_this5","_this6","TodoEntry","observer","state","value","handleKeyDown","event","keyCode","preventDefault","todoStore","addTodo","setState","react_default","a","createElement","className","onChange","target","onKeyDown","type","placeholder","Component","TodoItem","props","possibleConstructorReturn","getPrototypeOf","call","onToggle","toggle","deleteTodo","console","log","checked","onClick","TodoItems","map","components_TodoItem","Footer","length","allTodo","actTodo","comTodo","clearComplete","App","components_TodoEntry","components_TodoItems","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b2d832bb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { observable , action, remove } from 'mobx'\r\n\r\nexport default class TodoModel {\r\n    id\r\n    @observable title\r\n    @observable completed\r\n\r\n    constructor(store ,title ,completed ,id) {\r\n        this.store = store\r\n        this.title = title\r\n        this.completed = completed\r\n        this.id = id\r\n    }\r\n\r\n    @action\r\n    toggle() {\r\n        this.completed = !this.completed\r\n    }\r\n}","import { observable, action } from 'mobx'\r\nimport TodoModel from './TodoModel'\r\n\r\nclass TodoStore {\r\n    @observable todos = []\r\n    @observable todosFull = []\r\n    @observable lastID = 0\r\n\r\n    @observable all = true\r\n    @observable act = false\r\n    @observable com = false\r\n\r\n    @action\r\n    filter = () => {\r\n        if (this.all == true) {\r\n            this.todos = this.todosFull\r\n        }\r\n        if (this.act == true) {\r\n            this.todos = this.todosFull.filter(todo => {\r\n                if(todo.completed == false)\r\n                    return todo\r\n            })\r\n        }\r\n        if (this.com == true) {\r\n            this.todos = this.todosFull.filter(todo => {\r\n                if(todo.completed == true)\r\n                    return todo\r\n            })\r\n        }\r\n    }\r\n\r\n    @action\r\n    clearComplete = () => {\r\n        // this.todosFull.forEach(todo => {\r\n        //     if(todo.completed == true){\r\n        //         this.deleteTodo(todo.id)\r\n        //     }\r\n        // })\r\n        this.todos = this.todosFull.filter(todo => {\r\n            if(todo.completed == false)\r\n                return todo\r\n        })\r\n        this.todosFull = this.todos\r\n        this.filter()\r\n    }\r\n\r\n    @action\r\n    addTodo(title) {\r\n        this.todosFull.push(new TodoModel(this, title, false, this.lastID++))\r\n        // console.log(lastID)\r\n        this.filter()\r\n    }\r\n    \r\n    @action\r\n    allTodo = () => {\r\n        this.all = true\r\n        this.act = false\r\n        this.com = false\r\n        this.filter()\r\n    }\r\n\r\n    @action\r\n    actTodo = () => {\r\n        this.all = false\r\n        this.act = true\r\n        this.com = false\r\n        this.filter()\r\n    }\r\n\r\n    @action\r\n    comTodo = () => {\r\n        this.all = false\r\n        this.act = false\r\n        this.com = true\r\n        this.filter()\r\n    }\r\n\r\n    @action\r\n    deleteTodo(id) {\r\n        let x\r\n        this.todos.forEach(todo => {\r\n            if (todo.id == id)\r\n                x = this.todos.indexOf(todo)\r\n        })\r\n        this.todos.remove(this.todos[x])\r\n        // delete todos[a]\r\n    }\r\n}\r\n\r\nconst store = new TodoStore()\r\nexport default store","import React , {Component} from 'react'\r\nimport '../App.css'\r\nimport todoStore from '../store/TodoStore'\r\nimport { observer } from 'mobx-react'\r\n\r\n@observer\r\nclass TodoEntry extends Component {\r\n    state = {\r\n        value: ' '\r\n    }\r\n    handleKeyDown = event => {\r\n        if(event.keyCode !== 13)\r\n            return\r\n        event.preventDefault()\r\n        todoStore.addTodo(this.state.value)\r\n        this.setState({\r\n            value: ' '\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <header className=\"header\">\r\n                <input\r\n                    value = {this.state.value}\r\n                    onChange={event => this.setState({value: event.target.value})}\r\n                    onKeyDown={\r\n                        event => this.handleKeyDown(event)\r\n                    }\r\n                    type=\"text\"\r\n                    className=\"new-todo\"\r\n                    placeholder=\"What needs to be done?\"\r\n                />\r\n            </header>\r\n        )\r\n    }\r\n}\r\nexport default TodoEntry","import React , {Component} from 'react'\r\nimport '../App.css'\r\nimport { observer } from 'mobx-react'\r\nimport todoStore from '../store/TodoStore'\r\n\r\n@observer\r\nclass TodoItem extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n    onToggle = () => {\r\n        this.props.todo.toggle()\r\n    }\r\n    remove = () => {\r\n        todoStore.deleteTodo(this.props.todo.id)\r\n        console.log(this.props.todo.id)\r\n    }\r\n    render() {\r\n        const { todo } = this.props\r\n        return (\r\n            <li className={todo.completed ? 'completed' : ' '}>\r\n            <div className=\"view\">\r\n                <input \r\n                    onChange = {this.onToggle}\r\n                    type=\"checkbox\" \r\n                    className=\"toggle\" \r\n                    value=\"on\" \r\n                    checked={todo.completed}\r\n                />\r\n                <label>{todo.title}</label>\r\n                <button\r\n                onClick = {this.remove}\r\n                className=\"destroy\"/>\r\n              </div>\r\n            </li>\r\n        )\r\n    }\r\n}\r\nexport default TodoItem","import React , {Component} from 'react'\r\nimport '../App.css'\r\nimport TodoItem from './TodoItem';\r\nimport todoStore from '../store/TodoStore'\r\nimport { observer } from 'mobx-react'\r\n\r\n@observer\r\nclass TodoItems extends Component {\r\n    render() {\r\n        return (\r\n        <section className=\"main\">\r\n          <ul className=\"todo-list\">\r\n            {\r\n              todoStore.todos.map((todo) => {\r\n                return(\r\n                  <TodoItem todo = {todo} />\r\n                )\r\n              })\r\n            }\r\n          </ul>\r\n        </section>\r\n        )\r\n    }\r\n}\r\nexport default TodoItems","import React, { Component } from 'react'\r\nimport '../App.css'\r\nimport todoStore from '../store/TodoStore'\r\nimport { observer } from 'mobx-react'\r\n\r\n@observer\r\nclass Footer extends Component {\r\n\r\n    state = {\r\n        all: true,\r\n        act: false,\r\n        com: false\r\n    }\r\n\r\n    render() {\r\n        if (todoStore.todosFull.length == 0)\r\n            return null\r\n        else\r\n            return (\r\n                <div className=\"footer\">\r\n                    <button className=\"todo-count\">\r\n                        <span>\r\n                            {todoStore.todosFull.filter(todo => todo.completed == false).length}\r\n                        </span>\r\n                        <strong> items left</strong>\r\n                    </button>\r\n                    <ul className=\"filters\">\r\n                        <li>\r\n                            <button onClick={() => {todoStore.allTodo()}}>\r\n                                <a className={todoStore.all ? 'selected' : ' '}>\r\n                                    All\r\n                                </a>\r\n                            </button>\r\n                        </li>\r\n\r\n                        <li>\r\n                            <button onClick={() => {todoStore.actTodo()}}>\r\n                                <a className={todoStore.act ? 'selected' : ' '}>\r\n                                    Active\r\n                                </a>\r\n                            </button>\r\n                        </li>\r\n\r\n                        <li>\r\n                            <button onClick={() => {todoStore.comTodo()}}>\r\n                                <a className={todoStore.com ? 'selected' : ' '}>\r\n                                    Completed\r\n                                </a>\r\n                            </button>\r\n                        </li>\r\n                    </ul>\r\n                    <a onClick={() => {todoStore.clearComplete()}} className=\"clear-completed\">\r\n                        clear-completed\r\n                    </a>\r\n                </div>\r\n            )\r\n    }\r\n}\r\nexport default Footer","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css'\nimport TodoEntry from './components/TodoEntry'\nimport TodoItems from './components/TodoItems'\nimport todoStore from './store/TodoStore'\nimport Footer from './components/Footer'\nimport {observer} from 'mobx-react'\n\nclass App extends Component {\n  \n  @observer\n  render() {\n    return (\n      <div id=\"todoapp\" className=\"todoapp\">\n        <h1>todo</h1>\n        <TodoEntry />\n        <TodoItems />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}